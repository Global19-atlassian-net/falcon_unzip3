"""Run in basedir.
"""
import argparse
import sys
import falcon_kit.util.io as io # We modify the global LOG().
from multiprocessing import cpu_count
from .. import rr_hctg_track


def parse_args(argv):
    parser = argparse.ArgumentParser(
        description='scan the raw read overlap information to identify the best hit from the reads to the contigs with read_to_contig_map generated by `fc_get_read_hctg_map`. Write rawread_ids.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument(
        '--n-core', type=int, default=cpu_count() // 2,  # as each LA4Falcon needs 1 also
        help='number of processes used for for tracking reads; '
        '0 for main process only')
    #parser.add_argument('--fofn', type=str, help='file contains the path of all LAS file to be processed in parallel')
    #parser.add_argument('--db', type=str, dest='db_fn', help='read db file path')
    parser.add_argument(
        '--phased-read-file', type=str, default="./3-unzip/all_phased_reads",
        help='phased-read-file (from where?)')
    parser.add_argument(
        '--read-to-contig-map', type=str, default="./4-quiver/read_maps/read_to_contig_map",
        help='read_to_contig_map, from fc_get_read_hctg_map')
    parser.add_argument(
        '--rawread-ids', type=str,
        default="./2-asm-falcon/read_maps/dump_rawread_ids/rawread_ids", help='rawread_ids file (from where?)')
    parser.add_argument(
        '--output', type=str,
        default="./2-asm-falcon/read_maps/dump_rawread_ids/rawread_to_contigs", help='Output')
    parser.add_argument(
        '--min-len', type=int, default=2500, help='min length of the reads')
    parser.add_argument(
        '--stream', action='store_true',
        help='stream from LA4Falcon, instead of slurping all at once; can save memory for large data')
    parser.add_argument(
        '--debug', '-g', action='store_true', help='single-threaded, plus other aids to debugging')
    parser.add_argument(
        '--silent', action='store_true', help='suppress cmd reporting on stderr')
    parser.add_argument(
        '--bestn', type=int, default=30, help='keep best n hits')
    args = parser.parse_args(argv[1:])
    return args


def setup(debug, silent, stream, **kwds):
    if debug:
        silent = False
    if silent:
        io.LOG = io.write_nothing
    if stream:
        rr_hctg_track.Reader = io.StreamedProcessReaderContext

def main(argv=sys.argv):
    args = parse_args(argv)
    args.n_core = 0 ### REMOVE ######################################
    setup(**vars(args))
    if args.debug:
        args.n_core = 0
    kwds = dict(
            read_to_contig_map=args.read_to_contig_map,
            bestn=args.bestn,
            phased_read_file=args.phased_read_file,
            rawread_ids=args.rawread_ids,
            min_len=args.min_len,
            n_core=args.n_core,
    )
    rr_hctg_track.run1(**kwds)


def main2(argv=sys.argv):
    """This is now stage2 -- was part of main().
    Same cmdline args, for simplicity.
    """
    args = parse_args(argv)
    setup(**vars(args))
    kwds = dict(
            read_to_contig_map=args.read_to_contig_map,
            bestn=args.bestn,
            output=args.output,
    )
    rr_hctg_track.run2(**kwds)


if __name__ == '__main__': # pragma: no cover
    main()  # We do not use main2() anymore, since rr_hctg_track2.nim is much better.
    # But note that the Nim versions cannot use the 'python -m' trick anyway, so
    # we will have to register those in mobs someday.
