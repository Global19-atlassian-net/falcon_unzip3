# snakemake -j -T --reason --printshellcmds  --latency-wait=1 -s quiver.snake static_4_quiver_cns_output
import json
import os
#import snakemake.utils

def snake_merge_dynamic_dict(reldir, input_fns, pattern, wildcards):
        '''Assume each wildcard appears at most once in the pattern.
        '''
        for k in wildcards:
            pattern = pattern.replace('{%s}' %k, '(?P<%s>\w+)' %k)
        re_dynamic = re.compile(pattern)
        mapped = list()
        for fn in input_fns:
            mo = re_dynamic.search(fn)
            assert mo, '{!r} did not match {!r}'.format(fn, re_dynamic.pattern)
            file_description = dict()
            file_description['wildcards'] = dict(mo.groupdict())
            file_description['fn'] = os.path.relpath(fn, reldir)
            mapped.append(file_description)
        return mapped

def snake_merge_multi_dynamic(output_fn, dict_of_input_fns, dict_of_patterns, wildcards):
        outdir = os.path.normpath(os.path.dirname(output_fn))
        if not os.path.isdir(outdir):
            os.makedirs(outdir)
        assert list(sorted(dict_of_input_fns.keys())) == list(sorted(dict_of_patterns.keys()))
        all_mapped = dict()
        for i in dict_of_patterns.keys():
            input_fns = dict_of_input_fns[i]
            pattern = dict_of_patterns[i]
            mapped = snake_merge_dynamic_dict(outdir, input_fns, pattern, wildcards)
            all_mapped[i] = mapped
        all_grouped = dict()
        for i, mapped in all_mapped.items():
            #print(i, mapped)
            for file_description in mapped:
                #print(file_description)
                #print(file_description['wildcards'])
                #print(list(sorted(file_description['wildcards'].items())))
                wildkey = ','.join('{}={}'.format(k,v) for k,v in sorted(file_description['wildcards'].items()))
                if wildkey not in all_grouped:
                    new_group = dict(
                        wildcards=dict(file_description['wildcards']),
                        fns=dict(),
                    )
                    all_grouped[wildkey] = new_group
                group = all_grouped[wildkey]
                wildcards = file_description['wildcards']
                assert wildcards == group['wildcards'], '{!r} should match {!r} by snakemake convention'.format(
                    wildcards, group['wildcards'])
                fn = file_description['fn']
                group['fns'][i] = fn
        ser = json.dumps(all_grouped, indent=2, separators=(',', ': ')) + '\n'
        with open(output_fn, 'w') as out:
            out.write(ser)

shell.prefix('''
set -vx
hostname
pwd
''')

rule static___4_quiver_track_reads:
    input:  hasm_done='3-unzip/1-hasm/hasm_done'
    output: rawread_to_contigs='4-quiver/track_reads/rawread_to_contigs'
    params:
        max_n_open_files="1000",
        topdir="/localdisk/scratch/cdunn/src/fe/run/greg200k-sv2",
        sge_option="-pe smp 12 -q default"
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date

python -m falcon_unzip.mains.get_read_hctg_map --base-dir={params.topdir} --output=read_to_contig_map
# formerly generated ./4-quiver/read_maps/read_to_contig_map

fc_rr_hctg_track.py --base-dir={params.topdir} --stream
# That writes into 0-rawreads/m_*/

abs_rawread_to_contigs=$(readlink -f ../../{output.rawread_to_contigs}) #TODO: No readlink
cd {params.topdir}
fc_rr_hctg_track2.exe --output=${{abs_rawread_to_contigs}}
cd -
ls -l ../../{output.rawread_to_contigs}

date
'''

rule static___4_quiver_select_reads:
    input:  input_bam_fofn='input_bam.fofn', rawread_to_contigs='4-quiver/track_reads/rawread_to_contigs'
    output: read2ctg='4-quiver/select_reads/read2ctg.msgpack'
    params:
        max_n_open_files="1000",
        topdir="/localdisk/scratch/cdunn/src/fe/run/greg200k-sv2",
        sge_option="-pe smp 12 -q default"
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date

python -m falcon_unzip.mains.get_read2ctg --output=../../{output.read2ctg} ../../{input.input_bam_fofn}

date
'''

rule static___4_quiver_merge_reads:
    input:  read2ctg='4-quiver/select_reads/read2ctg.msgpack', input_bam_fofn='input_bam.fofn'
    output: merged_fofn='4-quiver/merge_reads/merged.fofn'
    params:
        max_n_open_files="1000",
        topdir="/localdisk/scratch/cdunn/src/fe/run/greg200k-sv2",
        sge_option="-pe smp 12 -q default"
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date

rm -f ../../{output.merged_fofn}
abs_output_merged_fofn=$(readlink -f ../../{output.merged_fofn})
abs_input_input_bam_fofn=$(readlink -f ../../{input.input_bam_fofn})
abs_input_read2ctg=$(readlink -f ../../{input.read2ctg})
cd {params.topdir}
pwd
#fc_select_reads_from_bam.py --max-n-open-files={params.max_n_open_files} ${{abs_input_input_bam_fofn}}
python -m falcon_unzip.mains.bam_partition_and_merge --max-n-open-files={params.max_n_open_files} --read2ctg-fn=${{abs_input_read2ctg}} --merged-fn=${{abs_output_merged_fofn}} ${{abs_input_input_bam_fofn}}
cd -
ls -l ../../{output.merged_fofn}

date
'''

rule static___4_quiver_segregate_scatter:
    input:  merged_fofn='4-quiver/merge_reads/merged.fofn'
    output: scattered='4-quiver/segregate_scatter/scattered.json'
    params:
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date


python -m falcon_unzip.mains.bam_segregate_scatter --merged-fofn-fn=../../{input.merged_fofn} --scattered-fn=../../{output.scattered}

date
'''

rule dynamic_foo_split:
    input:  '4-quiver/segregate_scatter/scattered.json'
    output: merged_bamfn=dynamic('4-quiver/merge_reads/{segr}.symlink/merged.bam')
    shell: 'python -m falcon_unzip.mains.symlink_mapped --special-split={input} merged_bamfn="./4-quiver/merge_reads/{{segr}}.symlink/merged.bam"'

rule static___4_quiver_segregate_scatter__segr_:
    input:  merged_bamfn='4-quiver/merge_reads/{segr}.symlink/merged.bam'
    output: segregated_bam_fofn='4-quiver/segregate_scatter/{segr}/segregated_bam.fofn'
    params:
        max_n_open_files="1000",
        topdir="/localdisk/scratch/cdunn/src/fe/run/greg200k-sv2",
        sge_option="-pe smp 12 -q default",
        segr="{segr}"
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date


python -m falcon_unzip.mains.bam_segregate --merged-fn=../../../{input.merged_bamfn} --output-fn=../../../{output.segregated_bam_fofn}

date
'''

rule dynamic_foo_merge:
    input:  segregated_bam_fofn=ancient(dynamic('4-quiver/segregate_scatter/{segr}/segregated_bam.fofn'))
    output: '4-quiver/segregate_gather/segregated_bam.json'
    run:
        snake_merge_multi_dynamic(output[0],
            dict(
              segregated_bam_fofn=[str(i) for i in input.segregated_bam_fofn]
            ),
            dict(
              segregated_bam_fofn="4-quiver/segregate_scatter/{segr}/segregated_bam.fofn"
            ),
            ["segr"] # all wildcards
        )

rule static___4_quiver_segregate_bam:
    input:  gathered='4-quiver/segregate_gather/segregated_bam.json'
    output: ctg2segregated_bamfn='4-quiver/segregate_bam/ctg2segregated_bamfn.msgpack'
    params:
        max_n_open_files="1000",
        topdir="/localdisk/scratch/cdunn/src/fe/run/greg200k-sv2",
        sge_option="-pe smp 12 -q default"
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date


python -m falcon_unzip.mains.bam_segregate_gather --gathered-fn=../../{input.gathered} --ctg2segregated-bamfn-fn=../../{output.ctg2segregated_bamfn}

date
'''

rule static_4_quiver_quiver_scatter:
    input:  h_ctg_fa='3-unzip/all_h_ctg.fa', p_ctg_fa='3-unzip/all_p_ctg.fa', ctg2bamfn='4-quiver/segregate_bam/ctg2segregated_bamfn.msgpack'
    output: scattered='4-quiver/quiver_scatter/scattered.json'
    params:
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date

python -m falcon_unzip.mains.quiver_scatter --p-ctg-fasta-fn=../../{input.p_ctg_fa} --h-ctg-fasta-fn=../../{input.h_ctg_fa} --ctg2bamfn-fn=../../{input.ctg2bamfn} --scattered-fn=../../{output.scattered}

date
'''

rule dynamic_foo1_split:
    input:  '4-quiver/quiver_scatter/scattered.json'
    output: ref_fasta=dynamic('4-quiver/quiver_scatter/refs/{ctg_id}.symlink/ref.fa'), read_bam=dynamic('4-quiver/segregate_scatter/segregated/{ctg_id}.symlink/reads.bam'), ctg_type=dynamic('4-quiver/quiver_scatter/refs/{ctg_id}.symlink/ctg_type')
    shell: 'python -m falcon_unzip.mains.symlink_mapped --special-split={input} ref_fasta="4-quiver/quiver_scatter/refs/{{ctg_id}}.symlink/ref.fa" read_bam="4-quiver/segregate_scatter/segregated/{{ctg_id}}.symlink/reads.bam" ctg_type="4-quiver/quiver_scatter/refs/{{ctg_id}}.symlink/ctg_type"'

rule static_4_quiver_quiver_run__ctg_id_:
    input:  ref_fasta='4-quiver/quiver_scatter/refs/{ctg_id}.symlink/ref.fa', read_bam='4-quiver/segregate_scatter/segregated/{ctg_id}.symlink/reads.bam', ctg_type='4-quiver/quiver_scatter/refs/{ctg_id}.symlink/ctg_type'
    output: cns_fasta='4-quiver/quiver_run/{ctg_id}/cns.fasta.gz', job_done='4-quiver/quiver_run/{ctg_id}/quiver_done', ctg_type_again='4-quiver/quiver_run/{ctg_id}/ctg_type', cns_fastq='4-quiver/quiver_run/{ctg_id}/cns.fastq.gz'
    params:
        max_n_open_files="1000",
        topdir="/localdisk/scratch/cdunn/src/fe/run/greg200k-sv2",
        sge_option="-pe smp 12 -q default",
        ctg_id="{ctg_id}"
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date

set -vex
trap 'touch ../../../{output.job_done}.exit' EXIT
hostname
date

samtools faidx ../../../{input.ref_fasta}
pbalign --tmpDir=/localdisk/scratch/ --nproc=24 --minAccuracy=0.75 --minLength=50          --minAnchorSize=12 --maxDivergence=30 --concordant --algorithm=blasr          --algorithmOptions=--useQuality --maxHits=1 --hitPolicy=random --seed=1            ../../../{input.read_bam} ../../../{input.ref_fasta} aln-{params.ctg_id}.bam
#python -c 'import ConsensusCore2 as cc2; print cc2' # So quiver likely works.
(variantCaller --algorithm=arrow -x 5 -X 120 -q 20 -j 24 -r ../../../{input.ref_fasta} aln-{params.ctg_id}.bam            -o ../../../{output.cns_fasta} -o ../../../{output.cns_fastq}) || echo WARNING quiver failed. Maybe no reads for this block.
touch ../../../{output.cns_fasta}
touch ../../../{output.cns_fastq}
cp -f ../../../{input.ctg_type} ../../../{output.ctg_type_again}
date
touch ../../../{output.job_done}

date
'''

rule dynamic_foo1_merge:
    input:  cns_fasta=ancient(dynamic('4-quiver/quiver_run/{ctg_id}/cns.fasta.gz')), job_done=ancient(dynamic('4-quiver/quiver_run/{ctg_id}/quiver_done')), ctg_type_again=ancient(dynamic('4-quiver/quiver_run/{ctg_id}/ctg_type')), cns_fastq=ancient(dynamic('4-quiver/quiver_run/{ctg_id}/cns.fastq.gz'))
    output: '4-quiver/cns_gather/intermediate/int.gathered.json'
    run:
        snake_merge_multi_dynamic(output[0],
            dict(
              cns_fasta=[str(i) for i in input.cns_fasta],
              job_done=[str(i) for i in input.job_done],
              ctg_type_again=[str(i) for i in input.ctg_type_again],
              cns_fastq=[str(i) for i in input.cns_fastq]
            ),
            dict(
              cns_fasta="4-quiver/quiver_run/{ctg_id}/cns.fasta.gz",
              job_done="4-quiver/quiver_run/{ctg_id}/quiver_done",
              ctg_type_again="4-quiver/quiver_run/{ctg_id}/ctg_type",
              cns_fastq="4-quiver/quiver_run/{ctg_id}/cns.fastq.gz"
            ),
            ["ctg_id"] # all wildcards
        )

rule static_4_quiver_cns_gather:
    input:  gathered='4-quiver/cns_gather/intermediate/int.gathered.json'
    output: separated='4-quiver/cns_gather/gathered_quiver.json'
    params:
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date

python -m falcon_unzip.mains.quiver_separate_gathered --gathered-fn=../../{input.gathered} --output-fn=../../{output.separated}

date
'''

rule static_4_quiver_cns_output:
    input:  gathered_quiver='4-quiver/cns_gather/gathered_quiver.json'
    output: job_done='4-quiver/cns_output/job_done', cns_p_ctg_fastq='4-quiver/cns_output/cns_p_ctg.fastq', cns_h_ctg_fasta='4-quiver/cns_output/cns_h_ctg.fasta', cns_h_ctg_fastq='4-quiver/cns_output/cns_h_ctg.fastq', cns_p_ctg_fasta='4-quiver/cns_output/cns_p_ctg.fasta'
    params:
    shell:
        '''
outdir=$(dirname {output[0]})
#mkdir -p ${{outdir}}
cd ${{outdir}}
date

python -m falcon_unzip.mains.cns_zcat     --gathered-quiver-fn=../../{input.gathered_quiver}     --cns-p-ctg-fasta-fn=../../{output.cns_p_ctg_fasta}     --cns-p-ctg-fastq-fn=../../{output.cns_p_ctg_fastq}     --cns-h-ctg-fasta-fn=../../{output.cns_h_ctg_fasta}     --cns-h-ctg-fastq-fn=../../{output.cns_h_ctg_fastq} 
touch ../../{output.job_done}

date
'''
